# -*- coding: utf-8 -*-
# Copyright (c) 2016-present, CloudZero, Inc. All rights reserved.
# Licensed under the BSD-style license. See LICENSE file in the project root for full license information.

AWSTemplateFormatVersion: '2010-09-09'


Description: CloudZero Master Payer Template


Parameters:
  IsMasterPayerAccount:
    Description: Flag to indicate if this is the master payer account, i.e. existing valid CUR
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
  IsOrganizationMasterAccount:
    Description: Flag to indicate if this is an organization master account
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
  MasterPayerBillingBucketName:
    Description: The name of the S3 bucket responsible for billing data
    Type: String
  ReactorAccountId:
    Description: The CloudZero reactor AWS account ID
    Type: String
    Default: '061190967865'
  ExternalId:
    Description: |
      Unique ExternalId for Customer Organization; for cross-account Role Access and
      associating this template with a Customer Organization
    Type: String


Conditions:
  ValidExistingBucketName: !Not [ !Equals [ !Ref MasterPayerBillingBucketName, 'null' ] ]
  CreateCurAndBucketAndPolicy: !And
    - !Not
      - Condition: CreatePolicyForExistingCur
    - !Equals [ !Ref IsOrganizationMasterAccount, 'true' ]
  CreatePolicyForExistingCur: !And
    - Condition: ValidExistingBucketName
    - !Equals [ !Ref IsMasterPayerAccount, 'true' ]
  CreateRoleAndPolicy: !Or
    - Condition: CreatePolicyForExistingCur
    - Condition: CreateCurAndBucketAndPolicy

Resources:
  Role:
    Condition: CreateRoleAndPolicy
    Type: 'AWS::IAM::Role'
    Properties:
      Path: '/cloudzero/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: czServiceAccount01
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${ReactorAccountId}:root'
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref ExternalId

  CostAndUsageReportResource:
    Condition: CreateCurAndBucketAndPolicy
    Type: 'Custom::CostAndUsageReport'
    Properties:
      ServiceToken: !GetAtt CostAndUsageReportLambda.Arn
      Region: !Ref AWS::Region

  CostAndUsageReportRole:
    Condition: CreateCurAndBucketAndPolicy
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CurAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Sid: AllowLogging
              Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
            - Sid: AllowCreateCur
              Effect: Allow
              Action:
                - 'cur:*'
              Resource: '*'
            - Sid: AllowVerifyCurBucket
              Effect: Allow
              Action:
                - 's3:*'
              Resource:
                - !Sub 'arn:aws:s3:::cloudzero-cur-hourly-csv'
                - !Sub 'arn:aws:s3:::cloudzero-cur-hourly-csv/*'

  # NOTE: This is an inline lambda function b/c we want it to be easy for you
  # to see the resource we're creating, in this case a Cost and Usage report.
  # We always prefer pure CFN to custom resources; however, CFN currently does
  # not support creating a CUR.
  CostAndUsageReportLambda:
    Condition: CreateCurAndBucketAndPolicy
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Create/Delete Cost and Usage Report
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt CostAndUsageReportRole.Arn
      Timeout: 15
      # Unfortunately, the default lambda python execution environment includes an older
      # version of boto3 that does not support the ReportDefinition parameters we need.
      # This layer contains a newer version of boto3.
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:113088814899:layer:Klayers-python37-boto3:7'
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import logging

          cur = boto3.client('cur', region_name='us-east-1')  # cur is only in us-east-1
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)


          def handler(event, context):
              result = cfnresponse.SUCCESS
              report_name = 'cloudzero-cur-hourly-csv'
              bucket_name = 'cloudzero-cur-hourly-csv'
              try:
                  logger.info(f'Received event: {event}')
                  current_region = event['ResourceProperties']['Region']
                  valid_regions = {'us-west-1', 'us-west-2', 'ap-northeast-1', 'ap-northeast-3', 'eu-north-1', 'ap-southeast-1',
                                   'eu-west-1', 'us-east-1', 'ap-southeast-2', 'eu-central-1', 'ap-east-1'}
                  region = current_region if current_region in valid_regions else 'us-east-1'
                  s3 = boto3.resource('s3', region_name=region)
                  bucket = s3.Bucket(bucket_name)

                  if event['RequestType'] == 'Create':
                      bucket.create()
                      policy = {
                          'Version': '2012-10-17',
                          'Statement': [
                              {
                                  'Sid': 'AddBillReportsGet',
                                  'Effect': 'Allow',
                                  'Principal': {
                                      'Service': 'billingreports.amazonaws.com'
                                  },
                                  'Action': [
                                      's3:GetBucketAcl',
                                      's3:GetBucketPolicy'
                                  ],
                                  'Resource': f'arn:aws:s3:::{bucket_name}'
                              },
                              {
                                  'Sid': 'AddBillReportsPut',
                                  'Effect': 'Allow',
                                  'Principal': {
                                      'Service': 'billingreports.amazonaws.com'
                                  },
                                  'Action': 's3:PutObject',
                                  'Resource': f'arn:aws:s3:::{bucket_name}/*'
                              }
                          ]
                      }
                      bucket.Policy().put(Policy=json.dumps(policy))

                      logger.info(f'Creating {report_name}')
                      cur.put_report_definition(
                          ReportDefinition={
                              'AdditionalSchemaElements': ['RESOURCES'],
                              'Compression': 'GZIP', 'Format': 'textORcsv',
                              'RefreshClosedReports': True,
                              'ReportName': report_name,
                              'ReportVersioning': 'CREATE_NEW_REPORT',
                              'S3Bucket': bucket_name, 'S3Prefix': 'cloudzero',
                              'S3Region': region, 'TimeUnit': 'HOURLY',
                          }
                      )
                  elif event['RequestType'] == 'Update':
                      logger.warning(f'Update is unsupported')
                  elif event['RequestType'] == 'Delete':
                      logger.info(f'Deleting {report_name}')
                      bucket.objects.all().delete()
                      bucket.delete()
                      cur.delete_report_definition(ReportName=report_name)
              except Exception:
                  logger.error('Failed to Update Cur Resource', exc_info=True)
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {'ReportS3Bucket': bucket_name, 'ReportS3Prefix': 'cloudzero'})


              
  RolePolicy:
    Condition: CreateRoleAndPolicy
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub 'cloudzero-master-payer-policy-${ReactorAccountId}'
      Roles:
        - !Ref Role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ProtectAccountInfo1
            Effect: Deny
            Action: 'aws-portal:*Account'
            Resource: '*'
          - Sid: AccessMasterPayerBillingBucket
            Effect: Allow
            Action:
              - 's3:Get*'
              - 's3:List*'
            Resource: !If
              - CreatePolicyForExistingCur
              - 
                - !Sub 'arn:aws:s3:::${MasterPayerBillingBucketName}'
                - !Sub 'arn:aws:s3:::${MasterPayerBillingBucketName}/*'
              - 
                - !Sub 'arn:aws:s3:::cloudzero-cur-hourly-csv'
                - !Sub 'arn:aws:s3:::cloudzero-cur-hourly-csv/*'
          - Sid: ViewBilling1
            Effect: Allow
            Action:
              - 'aws-portal:View*'
              - 'budgets:*'
              - 'cur:*'
              - 'ce:*'
            Resource: '*'
          - Sid: ReservedCapacityServices
            Effect: Allow
            Action:
              - 'cloudfront:Get*'
              - 'cloudfront:List*'
              - 'dynamodb:Describe*'
              - 'dynamodb:Get*'
              - 'dynamodb:List*'
              - 'ec2:Describe*'
              - 'ec2:Get*'
              - 'ec2:Get*'
              - 'elasticache:Describe*'
              - 'elasticache:List*'
              - 'elasticmapreduce:Describe*'
              - 'elasticmapreduce:List*'
              - 'es:Describe*'
              - 'es:List*'
              - 'es:Get*'
              - 'rds:Describe*'
              - 'redshift:Describe*'
              - 'redshift:List*'
            Resource: '*'

Outputs:
  RoleArn:
    Description: The cloudzero cross account role ARN
    Value: !If [ CreateRoleAndPolicy, !GetAtt Role.Arn, 'null' ]
  ReportS3Bucket:
    Description: The CUR bucket if it was created
    Value: !If [ CreateCurAndBucketAndPolicy, !GetAtt CostAndUsageReportResource.ReportS3Bucket, 'null' ]
  ReportS3Prefix:
    Description: The CUR bucket prefix if it was created
    Value: !If [ CreateCurAndBucketAndPolicy, !GetAtt CostAndUsageReportResource.ReportS3Prefix, 'null' ]
