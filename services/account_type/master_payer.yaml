# -*- coding: utf-8 -*-
# Copyright (c) 2016-present, CloudZero, Inc. All rights reserved.
# Licensed under the BSD-style license. See LICENSE file in the project root for full license information.

AWSTemplateFormatVersion: '2010-09-09'


Description: CloudZero Master Payer Template


Parameters:
  IsMasterPayerAccount:
    Description: Flag to indicate if this is the master payer account, i.e. existing valid CUR
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
  IsOrganizationMasterAccount:
    Description: Flag to indicate if this is an organization master account
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
  MasterPayerBillingBucketName:
    Description: The name of the S3 bucket responsible for billing data
    Type: String
  ReactorAccountId:
    Description: The CloudZero reactor AWS account ID
    Type: String
    Default: '061190967865'
  ExternalId:
    Description: |
      Unique ExternalId for Customer Organization; for cross-account Role Access and
      associating this template with a Customer Organization
    Type: String

Conditions:
  ValidExistingBucketName: !Not [ !Equals [ !Ref MasterPayerBillingBucketName, 'null' ] ]
  CreateCurAndBucketAndPolicy: !And
    - !Not
      - Condition: ValidExistingBucketName
    - !Equals [ !Ref IsMasterPayerAccount, 'true' ]
  CreatePolicyForExistingCur: !And
    - Condition: ValidExistingBucketName
    - !Equals [ !Ref IsMasterPayerAccount, 'true' ]
  CreateRoleAndPolicy: !Or
    - Condition: CreatePolicyForExistingCur
    - Condition: CreateCurAndBucketAndPolicy

Mappings:
  Defaults:
    Cur:
      BucketName: 'cz-cur-hourly-csv'

Resources:
  Role:
    Condition: CreateRoleAndPolicy
    Type: 'AWS::IAM::Role'
    Properties:
      Path: '/cloudzero/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: czServiceAccount01
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${ReactorAccountId}:root'
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref ExternalId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
        - arn:aws:iam::aws:policy/SecurityAudit
        - arn:aws:iam::aws:policy/job-function/ViewOnlyAccess
        - arn:aws:iam::aws:policy/job-function/Billing
        - arn:aws:iam::aws:policy/AWSBillingReadOnlyAccess

  CostAndUsageReportResource:
    Condition: CreateCurAndBucketAndPolicy
    Type: 'Custom::CostAndUsageReport'
    Properties:
      ServiceToken: !GetAtt CostAndUsageReportLambda.Arn
      Region: !Ref AWS::Region
      BucketName: !Sub
        - '${BucketName}-${Id}'
        - { BucketName: !FindInMap [ Defaults, Cur, BucketName ],
            Id: !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] }

  CostAndUsageReportRole:
    Condition: CreateCurAndBucketAndPolicy
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CurAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Sid: AllowLogging
              Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
            - Sid: AllowCreateCur
              Effect: Allow
              Action:
                - 'cur:*'
              Resource: '*'
            - Sid: AllowVerifyCurBucket
              Effect: Allow
              Action:
                - 's3:*'
              Resource:
                - !Sub
                  - 'arn:aws:s3:::${BucketName}-${Id}'
                  - { BucketName: !FindInMap [ Defaults, Cur, BucketName ],
                      Id: !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] }
                - !Sub
                  - 'arn:aws:s3:::${BucketName}-${Id}/*'
                  - { BucketName: !FindInMap [ Defaults, Cur, BucketName ],
                      Id: !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] }

  # NOTE: This is an inline lambda function b/c we want it to be easy for you
  # to see the resource we're creating, in this case a Cost and Usage report.
  # We always prefer pure CFN to custom resources; however, CFN currently does
  # not support creating a CUR.
  CostAndUsageReportLambda:
    Condition: CreateCurAndBucketAndPolicy
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Create/Delete Cost and Usage Report
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt CostAndUsageReportRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import logging
          import time

          cur = boto3.client('cur', region_name='us-east-1')  # cur is only in us-east-1
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              result = cfnresponse.SUCCESS
              report_name = 'cloudzero-cur-hourly-csv'
              s3_prefix = 'cloudzero'
              report_s3_prefix = f'{s3_prefix}/{report_name}'

              try:
                  logger.info(f'Received event: {event}')
                  bucket_name = event['ResourceProperties']['BucketName']
                  current_region = event['ResourceProperties']['Region']
                  valid_regions = {'us-west-1','us-west-2','ap-northeast-1','ap-southeast-1',
                                   'eu-west-1','us-east-1','ap-southeast-2','eu-central-1'}
                  region = current_region if current_region in valid_regions else 'us-east-1'
                  s3 = boto3.resource('s3', region_name=region)
                  bucket = s3.Bucket(bucket_name)

                  if event['RequestType'] == 'Create':
                      logger.info(f'Creating {bucket_name} in {region}')
                      bucket.create(**({} if region == 'us-east-1' else {'CreateBucketConfiguration': {'LocationConstraint': region}}))
                      bucket.wait_until_exists()
                      policy = {
                          'Version': '2012-10-17',
                          'Statement': [
                              {
                                  'Sid': 'AddBillReportsGet',
                                  'Effect': 'Allow',
                                  'Principal': {
                                      'Service': 'billingreports.amazonaws.com'
                                  },
                                  'Action': [
                                      's3:GetBucketAcl',
                                      's3:GetBucketPolicy'
                                  ],
                                  'Resource': f'arn:aws:s3:::{bucket_name}'
                              },
                              {
                                  'Sid': 'AddBillReportsPut',
                                  'Effect': 'Allow',
                                  'Principal': {
                                      'Service': 'billingreports.amazonaws.com'
                                  },
                                  'Action': 's3:PutObject',
                                  'Resource': f'arn:aws:s3:::{bucket_name}/*'
                              }
                          ]
                      }
                      for attempt in range(5):
                        try:
                          logger.info(f'Adding bucket policy to {bucket_name}')
                          bucket.Policy().put(Policy=json.dumps(policy))
                        except:
                          time.sleep(1)
                        else:
                          break

                      for attempt in range(5):
                        try:
                          logger.info(f'Creating {report_name}')
                          cur.put_report_definition(
                              ReportDefinition={
                                  'AdditionalSchemaElements': ['RESOURCES'],
                                  'Compression': 'GZIP', 'Format': 'textORcsv',
                                  'RefreshClosedReports': True,
                                  'ReportName': report_name,
                                  'ReportVersioning': 'CREATE_NEW_REPORT',
                                  'S3Bucket': bucket_name, 'S3Prefix': s3_prefix,
                                  'S3Region': region, 'TimeUnit': 'HOURLY',
                              }
                          )
                        except:
                          time.sleep(1)
                        else:
                          break
                  elif event['RequestType'] == 'Update':
                      logger.warning(f'Update is unsupported')
                  elif event['RequestType'] == 'Delete':
                      logger.warning(f'We do not want to delete your billing data.')
              except Exception:
                  logger.error('Failed to Update Cur Resource', exc_info=True)
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {'ReportS3Bucket': bucket_name, 'ReportS3Prefix': report_s3_prefix})




  RolePolicy:
    Condition: CreateRoleAndPolicy
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub 'cloudzero-master-payer-policy-${ReactorAccountId}'
      Roles:
        - !Ref Role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CZMasterPayerBillingBucket20190912
            Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource: !If
              - CreatePolicyForExistingCur
              -
                - !Sub 'arn:aws:s3:::${MasterPayerBillingBucketName}'
                - !Sub 'arn:aws:s3:::${MasterPayerBillingBucketName}/*'
              -
                - !Sub
                  - 'arn:aws:s3:::${BucketName}-${Id}'
                  - { BucketName: !FindInMap [ Defaults, Cur, BucketName ],
                      Id: !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] }
                - !Sub
                  - 'arn:aws:s3:::${BucketName}-${Id}/*'
                  - { BucketName: !FindInMap [ Defaults, Cur, BucketName ],
                      Id: !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] }
          - Sid: CZCostMonitoring20230119
            Effect: Allow
            Action:
              - account:GetAccountInformation
              - billing:Get*
              - budgets:Describe*
              - budgets:View*
              - ce:Describe*
              - ce:Get*
              - ce:List*
              - consolidatedbilling:Get*
              - consolidatedbilling:List*
              - cur:Describe*
              - cur:Get*
              - cur:Validate*
              - freetier:Get*
              - invoicing:Get*
              - invoicing:List*
              - organizations:Describe*
              - organizations:List*
              - payments:Get*
              - payments:List*
              - pricing:*
              - tax:Get*
              - tax:List*
            Resource: "*"
          - Sid: CZActivityMonitoring20210423
            Effect: Allow
            Action:
              - cloudtrail:Get*
              - cloudtrail:List*
              - cloudtrail:Describe*
              - health:Describe*
              - support:DescribeTrustedAdvisor*
              - servicequotas:Get*
              - servicequotas:List*
              - resource-groups:Get*
              - resource-groups:List*
              - resource-groups:Search*
              - cloudformation:DescribeStacks
              - cloudformation:ListStackResources
              - tag:Get*
              - tag:Describe*
              - resource-explorer:List*
              - account:ListRegions
            Resource: "*"
          - Sid: CZReservedCapacity20190912
            Effect: Allow
            Action:
              - dynamodb:DescribeReserved*
              - ec2:DescribeReserved*
              - elasticache:DescribeReserved*
              - es:DescribeReserved*
              - rds:DescribeReserved*
              - redshift:DescribeReserved*
            Resource: "*"
          - Sid: CloudZeroContainerInsightsAccess20210423
            Effect: Allow
            Action:
              - logs:List*
              - logs:Describe*
              - logs:StartQuery
              - logs:StopQuery
              - logs:Filter*
              - logs:Get*
            Resource: arn:aws:logs:*:*:log-group:/aws/containerinsights/*
          - Sid: CloudZeroCloudWatchContainerLogStreamAccess20210906
            Effect: Allow
            Action:
              - logs:GetQueryResults
              - logs:DescribeLogGroups
            Resource: arn:aws:logs:*:*:log-group::log-stream:*
          - Sid: CloudZeroCloudWatchMetricsAccess20210423
            Effect: Allow
            Action:
              - autoscaling:Describe*
              - cloudwatch:Describe*
              - cloudwatch:Get*
              - cloudwatch:List*
            Resource: "*"

Outputs:
  RoleArn:
    Description: The cloudzero cross account role ARN
    Value: !If [ CreateRoleAndPolicy, !GetAtt Role.Arn, 'null' ]
  ReportS3Bucket:
    Description: The CUR bucket if it was created
    Value: !If [ CreateCurAndBucketAndPolicy, !GetAtt CostAndUsageReportResource.ReportS3Bucket, 'null' ]
  ReportS3Prefix:
    Description: The CUR bucket prefix if it was created
    Value: !If [ CreateCurAndBucketAndPolicy, !GetAtt CostAndUsageReportResource.ReportS3Prefix, 'null' ]
