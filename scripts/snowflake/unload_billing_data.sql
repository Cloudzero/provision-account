-- Existing role with permission to create the necessary objects
SET CLOUDZERO_BILLING_ACCESS_SCRIPT_ROLE = 'ACCOUNTADMIN';

-- Resources that must already exist outside of Snowflake
SET CLOUDZERO_BILLING_ACCESS_STORAGE_AWS_ROLE_ARN = '<snowflake-s3-access-role>';
SET CLOUDZERO_BILLING_ACCESS_S3_UNLOAD_LOCATION = '<bucket>/<prefix>';

-- Objects that will be used if they exist, or created if they do not
SET CLOUDZERO_BILLING_ACCESS_DATABASE = 'SNOWFLAKE_BILLING_DATA_ACCESS';
SET CLOUDZERO_BILLING_ACCESS_SCHEMA = 'PUBLIC';
SET CLOUDZERO_BILLING_ACCESS_WAREHOUSE = 'UNLOAD_SNOWFLAKE_BILLING_DATA';
SET CLOUDZERO_BILLING_ACCESS_STORAGE_INTEGRATION = 'CLOUDZERO_BILLING_DATA_S3_ACCESS';

-- Objects that be (re)created
SET CLOUDZERO_BILLING_ACCESS_TASK = 'CLOUDZERO_UNLOAD_BILLING_DATA_TASK';
SET CLOUDZERO_BILLING_ACCESS_ROLE = 'CLOUDZERO_UNLOAD_BILLING_DATA_ROLE';

----------------------------------------------------------------------------------------------------------------
/*
 * Create Storage Integration to give Snowflake access to the S3 bucket where we will unload billing data
 */
USE ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_SCRIPT_ROLE);
CREATE STORAGE INTEGRATION IF NOT EXISTS IDENTIFIER($CLOUDZERO_BILLING_ACCESS_STORAGE_INTEGRATION)
TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = S3
  ENABLED = TRUE
  STORAGE_AWS_ROLE_ARN = $CLOUDZERO_BILLING_ACCESS_STORAGE_AWS_ROLE_ARN
STORAGE_ALLOWED_LOCATIONS = ('*');

DESC STORAGE INTEGRATION IDENTIFIER($CLOUDZERO_BILLING_ACCESS_STORAGE_INTEGRATION);
-- NOTE: Must update the IAM Role with STORAGE_AWS_IAM_USER_ARN and STORAGE_AWS_EXTERNAL_ID
-- For details see: https://docs.snowflake.com/en/user-guide/data-load-s3-config-storage-integration.html#step-5-grant-the-iam-user-permissions-to-access-bucket-objects

------------------------------------------------------------------------------------------------------------------

/*
 * Create Storage Integration to give Snowflake access to the S3 bucket where we will unload billing data
 */
USE ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_SCRIPT_ROLE);
CREATE DATABASE IF NOT EXISTS IDENTIFIER($CLOUDZERO_BILLING_ACCESS_DATABASE);
USE DATABASE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_DATABASE);
USE SCHEMA IDENTIFIER($CLOUDZERO_BILLING_ACCESS_SCHEMA);

/*
 * Create Warehouse, Stored Procedures, and Task to collect billing data
 */
CREATE WAREHOUSE IF NOT EXISTS IDENTIFIER($CLOUDZERO_BILLING_ACCESS_WAREHOUSE) WITH WAREHOUSE_SIZE = 'XSMALL' AUTO_SUSPEND = 60 AUTO_RESUME = TRUE;
USE WAREHOUSE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_WAREHOUSE);

CREATE OR REPLACE PROCEDURE CLOUDZERO_UNLOAD_BILLING_DATA(FOR_MONTH TIMESTAMP, LOCATION VARCHAR, STORAGE_INTEGRATION VARCHAR)
    RETURNS VARCHAR
    LANGUAGE JAVASCRIPT
    EXECUTE AS CALLER
AS
$$
var parameters = snowflake.execute({sqlText: `
    SELECT DATE_TRUNC('month', CONVERT_TIMEZONE('UTC', :1)) as RANGE_START,
           (RANGE_START + interval '1 month') as RANGE_END,
           TO_CHAR(RANGE_START, 'YYYYMMDD') || '-' || TO_CHAR(RANGE_END, 'YYYYMMDD') as BILLING_PERIOD,
           UUID_STRING() as ID;`,
    binds: [FOR_MONTH.toISOString()]});
parameters.next();

var range_start = parameters.RANGE_START;
var range_end = parameters.RANGE_END;
var billing_period = parameters.BILLING_PERIOD;
var id = parameters.ID;

var unload_loc = `s3://${LOCATION}/${billing_period}/${id}`;

var billing_data_views = [['METERING_HISTORY', 'START_TIME'],
                          ['METERING_DAILY_HISTORY', 'USAGE_DATE'],
                          ['DATABASE_STORAGE_USAGE_HISTORY', 'USAGE_DATE'],
                          ['STAGE_STORAGE_USAGE_HISTORY', 'USAGE_DATE']];

billing_data_views.forEach(params => {
    var [view, date_column] = params;
    snowflake.execute({sqlText: `
      COPY INTO ${unload_loc}/${view}
      FROM (
        SELECT *
          FROM SNOWFLAKE.ACCOUNT_USAGE.${view}
          WHERE ${date_column} >= :1
          AND ${date_column} < :2
      )
      storage_integration = ${STORAGE_INTEGRATION}
      header = true
      file_format = (type = CSV, COMPRESSION = GZIP, NULL_IF=(''),
                     FIELD_OPTIONALLY_ENCLOSED_BY = '"',
                     EMPTY_FIELD_AS_NULL=TRUE, TIMESTAMP_FORMAT='YYYY-MM-DDTHH24:MI:SS TZHTZM');`,
    binds: [range_start, range_end]
    });
});

var manifest = `s3://${LOCATION}/${billing_period}/manifest.json`;
snowflake.execute({sqlText: `
  COPY INTO ${manifest}
  FROM (
    SELECT PARSE_JSON('
        {"timestamp": "' || SYSDATE()::string || '",
        "version": "1",
        "id": "' || :1 || '",
        "account": "' || LOWER(CURRENT_ACCOUNT()) || '",
        "region": "' || LOWER(CURRENT_REGION()) || '",
        "billingPeriod": "' || :2 || '"}'
    )
  )
  STORAGE_INTEGRATION = ${STORAGE_INTEGRATION}
  OVERWRITE = TRUE
  SINGLE = TRUE
  FILE_FORMAT = (type = JSON, COMPRESSION = NONE);`,
binds: [id, billing_period]
});

return id;
$$;

CREATE OR REPLACE PROCEDURE CLOUDZERO_UNLOAD_ALL_BILLING_DATA(LOCATION VARCHAR, STORAGE_INTEGRATION VARCHAR)
    RETURNS BOOLEAN
    LANGUAGE JAVASCRIPT
    EXECUTE AS CALLER
AS
$$
var result = snowflake.execute({sqlText: `
    SELECT DISTINCT DATE_TRUNC('month', CONVERT_TIMEZONE('UTC', START_TIME)) as BILLED_MONTH
    FROM SNOWFLAKE.ACCOUNT_USAGE.METERING_HISTORY
    ORDER BY BILLED_MONTH DESC;`});

    while(result.next()) {
        snowflake.execute({sqlText: `CALL CLOUDZERO_UNLOAD_BILLING_DATA(:1, :2, :3);`,
                           binds: [result.BILLED_MONTH, LOCATION, STORAGE_INTEGRATION]});
    }

    return true;
$$;

CREATE OR REPLACE PROCEDURE _TEMP_CLOUDZERO_CREATE_BILLING_ACCESS_TASK(LOCATION VARCHAR, STORAGE_INTEGRATION VARCHAR)
    RETURNS BOOLEAN
    LANGUAGE JAVASCRIPT
    EXECUTE AS CALLER
AS
$$
snowflake.execute({sqlText: `
    CREATE OR REPLACE TASK IDENTIFIER($CLOUDZERO_BILLING_ACCESS_TASK)
        WAREHOUSE = $CLOUDZERO_BILLING_ACCESS_WAREHOUSE
        SCHEDULE = '360 minute'
    AS
        CALL CLOUDZERO_UNLOAD_BILLING_DATA(
            CURRENT_TIMESTAMP() - interval '8 hours',
            '${LOCATION}',
            '${STORAGE_INTEGRATION}');
    `})
$$;
CALL _TEMP_CLOUDZERO_CREATE_BILLING_ACCESS_TASK($CLOUDZERO_BILLING_ACCESS_S3_UNLOAD_LOCATION,
                                   $CLOUDZERO_BILLING_ACCESS_STORAGE_INTEGRATION);
DROP PROCEDURE _TEMP_CLOUDZERO_CREATE_BILLING_ACCESS_TASK(VARCHAR, VARCHAR);

/*
 * Create a Role with limited permissions to access billing data
 */
CREATE ROLE IF NOT EXISTS IDENTIFIER($CLOUDZERO_BILLING_ACCESS_ROLE);
GRANT MONITOR USAGE ON ACCOUNT TO ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_ROLE);
GRANT EXECUTE TASK ON ACCOUNT TO ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_ROLE);
GRANT USAGE ON INTEGRATION IDENTIFIER($CLOUDZERO_BILLING_ACCESS_STORAGE_INTEGRATION) TO ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_ROLE);
GRANT USAGE, MONITOR ON DATABASE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_DATABASE) TO ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_ROLE);
GRANT USAGE, MONITOR ON SCHEMA IDENTIFIER($CLOUDZERO_BILLING_ACCESS_SCHEMA) TO ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_ROLE);
GRANT IMPORTED PRIVILEGES ON DATABASE SNOWFLAKE TO ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_ROLE);
GRANT OPERATE, USAGE ON WAREHOUSE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_WAREHOUSE) TO ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_ROLE);
GRANT USAGE ON PROCEDURE CLOUDZERO_UNLOAD_BILLING_DATA(TIMESTAMP_NTZ, VARCHAR, VARCHAR) TO ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_ROLE);
GRANT USAGE ON PROCEDURE CLOUDZERO_UNLOAD_ALL_BILLING_DATA(VARCHAR, VARCHAR) TO ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_ROLE);
GRANT OWNERSHIP ON TASK IDENTIFIER($CLOUDZERO_BILLING_ACCESS_TASK) TO ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_ROLE);

/*
 * Initial UNLOAD of existing data and start the task to poll periodically.
 */
GRANT ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_ROLE) TO ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_SCRIPT_ROLE);
USE ROLE IDENTIFIER($CLOUDZERO_BILLING_ACCESS_ROLE);
CALL CLOUDZERO_UNLOAD_ALL_BILLING_DATA($CLOUDZERO_BILLING_ACCESS_S3_UNLOAD_LOCATION,
                                   $CLOUDZERO_BILLING_ACCESS_STORAGE_INTEGRATION);
ALTER TASK IDENTIFIER($CLOUDZERO_BILLING_ACCESS_TASK) RESUME;
